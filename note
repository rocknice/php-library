1、用户向入口脚本 web/index.php 发起请求。
2、入口脚本加载应用配置并创建一个应用 实例去处理请求。
3、应用通过请求组件解析请求的 路由。
4、应用创建一个控制器实例去处理请求。
5、控制器创建一个动作实例并针对操作执行过滤器。
6、如果任何一个过滤器返回失败，则动作取消。
7、如果所有过滤器都通过，动作将被执行。
8、动作会加载一个数据模型，或许是来自数据库。
9、动作会渲染一个视图，把数据模型提供给它。
10、渲染结果返回给响应组件。
11、响应组件发送渲染结果给用户浏览器。

如何创建一个php页面

1、先创建动作，声明在控制器中：SiteController.php，Yii 使用 action 前缀区分普通方法和操作。 
注：action 前缀后面的名称被映射为操作的 ID。在操作方法中，render() 被用来渲染一个 名为 say 的视图文件。结果会被应用接收并显示给最终用户的浏览器（作为整页 HTML 的一部分）

2、创建视图，say 视图应该存为 views/site/say.php 文件。
注：当一个操作中调用了 render() 方法时， 它将会按 views/控制器 ID/视图名.php 路径加载 PHP 文件。如果你省略 URL 中的 message 参数，将会看到页面只显示 “Hello”。 这是因为 message 被作为一个参数传给 actionSay() 方法，当省略它时，参数将使用默认的 “Hello” 代替。
URL 中的参数 r 需要更多解释。 它代表路由，是整个应用级的， 指向特定操作的独立 ID。路由格式是 控制器 ID/操作 ID。应用接受请求的时候会检查参数， 使用控制器 ID 去确定哪个控制器应该被用来处理请求。 然后相应控制器将使用操作 ID 去确定哪个操作方法将被用来做具体工作。 上述例子中，路由 site/say 将被解析至 SiteController 控制器和其中的 say 操作。 因此 SiteController::actionSay() 方法将被调用处理请求。

3、使用form表单
