1、用户向入口脚本 web/index.php 发起请求。
2、入口脚本加载应用配置并创建一个应用 实例去处理请求。
3、应用通过请求组件解析请求的 路由。
4、应用创建一个控制器实例去处理请求。
5、控制器创建一个动作实例并针对操作执行过滤器。
6、如果任何一个过滤器返回失败，则动作取消。
7、如果所有过滤器都通过，动作将被执行。
8、动作会加载一个数据模型，或许是来自数据库。
9、动作会渲染一个视图，把数据模型提供给它。
10、渲染结果返回给响应组件。
11、响应组件发送渲染结果给用户浏览器。

一、如何创建一个php页面

1、先创建动作，声明在控制器中：SiteController.php，Yii 使用 action 前缀区分普通方法和操作。 
注：action 前缀后面的名称被映射为操作的 ID。在操作方法中，render() 被用来渲染一个 名为 say 的视图文件。结果会被应用接收并显示给最终用户的浏览器（作为整页 HTML 的一部分）

2、创建视图，say 视图应该存为 views/site/say.php 文件。
注：当一个操作中调用了 render() 方法时， 它将会按 views/控制器 ID/视图名.php 路径加载 PHP 文件。如果你省略 URL 中的 message 参数，将会看到页面只显示 “Hello”。 这是因为 message 被作为一个参数传给 actionSay() 方法，当省略它时，参数将使用默认的 “Hello” 代替。
URL 中的参数 r 需要更多解释。 它代表路由，是整个应用级的， 指向特定操作的独立 ID。路由格式是 控制器 ID/操作 ID。应用接受请求的时候会检查参数， 使用控制器 ID 去确定哪个控制器应该被用来处理请求。 然后相应控制器将使用操作 ID 去确定哪个操作方法将被用来做具体工作。 上述例子中，路由 site/say 将被解析至 SiteController 控制器和其中的 say 操作。 因此 SiteController::actionSay() 方法将被调用处理请求。

二、如何使用form表单

1、创建模型（创建model）
步骤：
1）模型类 EntryForm 代表从用户那请求的数据， 该类如下所示并存储在 models/EntryForm.php 文件中。
2）EntryForm 类包含 name 和 email 两个公共成员， 用来储存用户输入的数据。它还包含一个名为 rules() 的方法， 用来返回数据验证规则的集合。上面声明的验证规则表示：
name 和 email 值都是必须的
email 的值必须满足email规则验证
3）

2、创建动作（创建controller）
步骤：
1）在 site 控制器中创建一个 entry 操作用于新建的模型。 

3、创建视图
步骤：
1）最后创建两个视图文件 entry-confirm 和 entry。 他们会被刚才创建的 entry 操作渲染。
说明：
entry-confirm 视图简单地显示提交的 name 和 email 数据。视图文件应该保存在 views/site/entry-confirm.php。
entry 视图显示一个 HTML 表单。视图文件应该保存在 views/site/entry.php。
2）关于验证：
你可能会好奇 HTML 表单暗地里是如何工作的呢， 看起来它可以为每个输入框显示文字标签， 而当你没输入正确的信息时又不需要刷新页面就能给出错误提示，似乎有些神奇。

是的，其实数据首先由客户端 JavaScript 脚本验证，然后才会提交给服务器通过 PHP 验证。 yii\widgets\ActiveForm 足够智能到把你在 EntryForm 模型中声明的验证规则转化成客户端 JavaScript 脚本去执行验证。 如果用户浏览器禁用了 JavaScript， 服务器端仍然会像 actionEntry() 方法里这样验证一遍数据。这保证了任何情况下用户提交的数据都是有效的。

输入框的文字标签是 field() 方法生成的，内容就是模型中该数据的属性名。 例如模型中的 name 属性生成的标签就是 Name。

4、使用数据库


过程总结：

1、用户在访问页面时先创建应用主体

2、部署一组提供各种不同功能的 应用组件 来处理请求。 例如，urlManager组件负责处理网页请求路由到对应的控制器。 
db组件提供数据库相关服务等等。在同一个应用中，每个应用组件都有一个独一无二的 ID 用来区分其他应用组件， 
你可以通过如下表达式访问应用组件：
可以使用 \Yii::$app->db 来获取到已注册到应用的 DB connection， 使用 \Yii::$app->cache 来获取到已注册到应用的 primary cache。
注：第一次使用以上表达式时候会创建应用组件实例， 后续再访问会返回此实例，无需再次创建。
应用组件可以是任意对象，可以在 应用主体配置配置 yii\base\Application::$components 属性。 

Yii 定义了一组固定ID和默认配置的 核心 组件， 例如 request 组件 用来收集用户请求并解析 路由； db 代表一个可以执行数据库操作的数据库连接。 通过这些组件，Yii应用主体能处理用户请求。

3、控制器是 MVC 模式中的一部分， 是继承yii\base\Controller类的对象，负责处理请求和生成响应。 
具体来说，控制器从应用主体 接管控制后会分析请求数据并传送到模型， 传送模型结果到视图，
最后生成输出响应信息。
注：控制器又包含路由和动作，路由相当于类，动作相当于类中定义的方法
控制器（路由）应继承yii\web\Controller 或它的子类。

归纳起来，控制器

可访问 请求 数据;
可根据请求数据调用 模型 的方法和其他服务组件;
可使用 视图 构造响应;
不应处理应被模型处理的请求数据;
应避免嵌入HTML或其他展示代码，这些代码最好在 视图中处理.

4、模型是 MVC 模式中的一部分， 是代表业务数据、规则和逻辑的对象。

可通过继承 yii\base\Model 或它的子类定义模型类， 基类yii\base\Model支持许多实用的特性：

属性: 代表可像普通类属性或数组 一样被访问的业务数据;
属性标签: 指定属性显示出来的标签;
块赋值: 支持一步给许多属性赋值;
验证规则: 确保输入数据符合所申明的验证规则;
数据导出: 允许模型数据导出为自定义格式的数组。

归纳起来，模型：
可包含属性来展示业务数据;
可包含验证规则确保数据有效和完整;
可包含方法实现业务逻辑;
不应直接访问请求，session和其他环境数据， 这些数据应该由控制器传入到模型;
应避免嵌入HTML或其他展示代码，这些代码最好在 视图中处理;
单个模型中避免太多的 场景.

5、视图是 MVC 模式中的一部分。 它是展示数据到终端用户的代码，在网页应用中， 
根据视图模板来创建视图，视图模板为PHP脚本文件， 主要包含HTML代码和展示类PHP代码，
通过view应用组件来管理， 该组件主要提供通用方法帮助视图构造和渲染， 
简单起见，我们称视图模板或视图模板文件为视图。

视图负责将模型的数据展示用户想要的格式，总之，视图

应主要包含展示代码，如HTML, 和简单的PHP代码来控制、格式化和渲染数据；
不应包含执行数据查询代码，这种代码放在模型中；
应避免直接访问请求数据，如 $_GET, $_POST，这种应在控制器中执行， 如果需要请求数据，应由控制器推送到视图。
可读取模型属性，但不应修改它们。


碰到的问题：
1、对gridView的使用，如何用php，在view中来布局。
2、如何使用js脚本将view和model和数据库联系起来。
3、如何操作数据。
4、前端发起请求成功后，如何返回给前端数据，让前端判断

CREATE TABLE `library` (
  `id` CHAR(10) NOT NULL PRIMARY KEY,
  `book` CHAR(52) NOT NULL DEFAULT '0',
  `auther` CHAR(50) NOT NULL DEFAULT '0',
  `type` CHAR(50) NOT NULL DEFAULT '0',
  `price` CHAR(50) NOT NULL DEFAULT '0',
  `publish` CHAR(50) NOT NULL DEFAULT '0',
  `date` CHAR(50) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

INSERT INTO `library` VALUES ('7443249','黄金时代','王小波','20.00','北京十月文艺出版社','2018-10');
INSERT INTO `library` VALUES ('3849372','月亮与六便士','毛姆','20.00','人民出版社','2018-10');
INSERT INTO `library` VALUES ('3847592','C语言程序设计','谭浩强','20.00','清华大学出版社','2018-10');
INSERT INTO `library` VALUES ('3920384','三国演义','罗贯中','20.00','人民文学出版社','2018-10');
INSERT INTO `library` VALUES ('1264637','三体','刘慈欣','20.00','电子音像出版社','2018-10');
INSERT INTO `library` VALUES ('3217889','流浪地球','刘慈欣','20.00','电子音像出版社','2018-10');
INSERT INTO `library` VALUES ('2309847','人生的智慧','叔本华','20.00','人民文学出版社','2018-10');